@use 'sass:map';

@use './design' as *;
@use './icon.scss';

$input: () !default;
$input: map.merge(
  (
    bg-color: get-css-var('fill-color-base'),
    bg-color-disabled: get-css-var('fill-color-humble'),
    b-color: get-css-var('border-color-base'),
    b-color-hover: get-css-var('color-primary-light-1'),
    b-color-focus: get-css-var('input-b-color-hover'),
    s-color-focus: get-css-var('color-primary-opacity-6'),
    placeholder-color: get-css-var('content-color-placeholder'),
    control-color: get-css-var('content-color-base'),
    control-color-disabled: get-css-var('content-color-disabled'),
    icon-color: get-css-var('content-color-secondary'),
    icon-color-hover: get-css-var('color-primary-base'),
    icon-color-disabled: get-css-var('input-control-color-disabled'),
    before-bg-color: get-css-var('fill-color-background'),
    after-bg-color: get-css-var('fill-color-background'),
    line-height: get-css-var('line-height-base'),
    border: get-css-var('border-shape') get-css-var('input-b-color'),
    radius: get-css-var('radius-base'),
    count-color: get-css-var('content-color-secondary'),
    count-color-disbaled: get-css-var('input-control-color-disabled'),
    count-font-size: get-css-var('font-size-secondary'),
    count-line-height: get-css-var('line-height-secondary'),
    height: 32px,
    v-padding: 4px,
    h-padding: 8px,
    padding: get-css-var('input-v-padding') get-css-var('input-h-padding'),
    prefix-width: 32px,
    suffix-width: 32px
  ),
  $input
);

@mixin define-input-style($style-map) {
  @include define-preset-style('input', $style-map);
}

@mixin handler($handler: &) {
  @at-root #{$handler} {
    position: relative;
    display: inline-flex;
    align-items: center;
    width: 100%;
    height: get-css-var('input-height');
    padding: get-css-var('input-v-padding') get-css-var('input-h-padding');
    background-color: get-css-var('input-bg-color');
    border: get-css-var('border-shape') get-css-var('input-b-color');
    border-radius: get-css-var('input-radius');
    outline: 0;
    transition:
      get-css-var('transition-background'),
      get-css-var('transition-border'),
      get-css-var('transition-shadow');

    &:hover {
      border-color: get-css-var('input-b-color-hover');
    }

    &:focus,
    &:focus-within,
    &--focused {
      z-index: 2;
      border-color: get-css-var('input-b-color-focus');
      box-shadow: get-css-var('shadow-focus') get-css-var('input-s-color-focus');
    }

    &--small {
      @include define-preset-values(
        'input',
        (
          height: 24px,
          v-padding: 1px
        )
      );
    }

    &--large {
      @include define-preset-values(
        'input',
        (
          height: 40px,
          v-padding: 7px
        )
      );
    }

    // &--has-prefix {
    //   padding-left: get-css-var('input-prefix-width');
    // }

    // &--has-suffix {
    //   padding-right: get-css-var('input-suffix-width');
    // }

    $states: success, error, warning;

    @each $state in $states {
      // 提升 state 样式的级别，以防止引入的先后顺序导致样式丢失
      &#{&}--#{$state} {
        @include define-input-style(
          (
            b-color: 'color' $state 'light-1',
            b-color-hover: 'color' $state 'light-1',
            s-color-focus: 'color' $state 'opacity-6'
          )
        );
      }
    }

    &--disabled {
      cursor: not-allowed;
      background-color: get-css-var('input-bg-color-disabled');

      &,
      &:hover,
      &:focus,
      &:focus-within {
        border-color: get-css-var('border-color-base');
        box-shadow: none;
      }

      %disabled-item {
        color: get-css-var('input-control-color-disabled');
        pointer-events: none;
        cursor: not-allowed;
      }
    }

    &--disabled#{&}--focused {
      border-color: get-css-var('border-color-base');
      box-shadow: none;
    }
  }

  &__control {
    width: 100%;
    height: 100%;
    padding: 0;
    font-size: inherit;
    line-height: get-css-var('input-line-height');
    color: get-css-var('input-control-color');
    background-color: transparent;
    border: 0;
    border-radius: get-css-var('input-radius');
    outline: 0;

    &:disabled {
      cursor: not-allowed;
    }

    &::placeholder {
      color: get-css-var('input-placeholder-color');
    }

    @extend %disabled-item;
  }

  &__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100%;
    color: get-css-var('input-icon-color');
    user-select: none;

    @extend %disabled-item;
  }

  &__prefix {
    margin-right: 4px;
  }

  &__suffix {
    margin-left: 4px;
  }

  &__clear {
    margin-left: 4px;
    cursor: pointer;
  }
}

.#{$namespace}-input {
  @at-root &-vars {
    @include define-preset-values('input', $input);
  }

  $self: &;
  $wrapper: #{&}-wrapper;
  $radius: get-css-var('input-radius');

  &-wrapper {
    @include basis;

    position: relative;
    display: inline-flex;
    align-items: center;
    width: 100%;
    background-color: get-css-var('input-bg-color');
  }

  @include basis;
  @include handler;

  &-wrapper & {
    background-color: transparent;
    border-radius: 0;
  }

  &-wrapper--before-only & {
    border-radius: 0 $radius $radius 0;
  }

  &-wrapper--after-only & {
    border-radius: $radius 0 0 $radius;
  }

  &--before {
    z-index: 1;
    border-left-color: transparent;
  }

  &--after {
    z-index: 1;
    border-right-color: transparent;
  }

  &__password {
    cursor: pointer;
  }

  &__count {
    position: absolute;
    top: 50%;
    right: 7px;
    margin-top: -0.5px;
    font-size: get-css-var('input-count-font-size');
    line-height: get-css-var('input-count-line-height');
    color: get-css-var('input-count-color');
    pointer-events: none;
    user-select: none;
    transition: get-css-var('transition-color');
    transform: translateY(-50%);
  }

  &--disabled &__count {
    color: get-css-var('input-count-color-disbaled');
  }

  &__before,
  &__after {
    position: relative;
    display: flex;
    align-items: center;
    height: calc(get-css-var('input-height'));
    padding: 0 get-css-var('input-h-padding');
    border: get-css-var('input-border');

    &--button {
      border: 0;
    }

    #{$self} {
      padding: 0;
      background-color: transparent;
      border-color: transparent;
      box-shadow: none;

      &__control {
        padding: 0 !important;
      }

      &__icon {
        &--prefix,
        &--suffix {
          width: auto;
        }
      }
    }
  }

  @mixin inner-select($bg-color) {
    .#{$namespace}-select {
      width: calc(100% + 2 * get-css-var('input-h-padding'));
      margin: 0 calc(get-css-var('input-h-padding') * -1);

      &__selector {
        min-width: 60px;
        background-color: transparent;
        border: 0;
        box-shadow: unset;
      }
    }
  }

  @mixin inner-button {
    .#{$namespace}-button {
      width: calc(100% + 2 * get-css-var('input-h-padding'));
      height: 100%;
      margin: 0 calc(get-css-var('input-h-padding') * -1);

      &--icon-only {
        width: calc(get-css-var('button-height') + 2 * get-css-var('input-h-padding'));
      }
    }
  }

  &__before {
    $bg-color: get-css-var('input-before-bg-color');

    background-color: $bg-color;
    border-right: 0;
    border-radius: $radius 0 0 $radius;

    &--button {
      margin-right: -1px;
    }

    .#{$namespace}-button {
      border-radius: $radius 0 0 $radius;
    }

    @include inner-button;
    @include inner-select($bg-color);
  }

  &__after {
    $bg-color: get-css-var('input-after-bg-color');

    background-color: $bg-color;
    border-left: 0;
    border-radius: 0 $radius $radius 0;

    &--button {
      margin-left: -1px;
    }

    .#{$namespace}-button {
      border-radius: 0 $radius $radius 0;
    }

    @include inner-button;
    @include inner-select($bg-color);
  }
}
